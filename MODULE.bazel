# Cubo Project

module(
    name = "cubo",
)

bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "freertos", version = "10.5.1.bcr.2")
bazel_dep(name = "nanopb", version = "0.4.9.1", repo_name = "com_github_nanopb_nanopb")
bazel_dep(name = "pigweed")
bazel_dep(name = "platforms", version = "0.0.10")
bazel_dep(name = "rules_platform", version = "0.1.0")
bazel_dep(name = "rules_python", version = "0.40.0")
bazel_dep(name = "rules_cc", version = "0.0.17")

bazel_dep(name = "hedron_compile_commands", dev_dependency = True)

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
local_repository = use_repo_rule("@bazel_tools//tools/build_defs/repo:local.bzl", "local_repository")
cipd_repository = use_repo_rule("@pigweed//pw_env_setup/bazel/cipd_setup:cipd_rules.bzl", "cipd_repository")

# Module overrides
# ================
# TODO: https://pwbug.dev/349880767 - Point this back to the upstream repo once
# this PR is merged.
archive_override(
    module_name = "hedron_compile_commands",
    strip_prefix = "bazel-compile-commands-extractor-163521345aa6366fd1ed801b989b668b5c806f69",
    urls = ["https://github.com/chadnorvell/bazel-compile-commands-extractor/archive/163521345aa6366fd1ed801b989b668b5c806f69.tar.gz"],
)

git_override(
    module_name = "pigweed",
    # ROLL: Warning: this entry is automatically updated.
    # ROLL: Last updated 2025-02-17.
    # ROLL: By https://cr-buildbucket.appspot.com/build/8722679720247443489.
    commit = "a551daada32288b2541783d99d81b23a621bf0b7",
    remote = "https://pigweed.googlesource.com/pigweed/pigweed",
)

git_repository = use_repo_rule(
    "@bazel_tools//tools/build_defs/repo:git.bzl",
    "git_repository",
)

git_repository(
    name = "bazel_clang_tidy",
    commit = "db677011c7363509a288a9fb3bf0a50830bbf791",
    remote = "https://github.com/erenon/bazel_clang_tidy.git",
)

local_repository(
    name = "atsame54_device_pack",
    path = "targets/atsame54n20a/Microchip.SAME54_DFP.3.8.234",
)

http_archive(
    name = "cmsis",
    build_file_content = """
cc_library(
  name = "core",
  includes = [ "CMSIS/Core/Include", ],
  hdrs = [
    "CMSIS/Core/Include/cmsis_version.h",
    "CMSIS/Core/Include/cmsis_compiler.h",
    "CMSIS/Core/Include/cmsis_gcc.h",
    "CMSIS/Core/Include/mpu_armv7.h",
    "CMSIS/Core/Include/core_cm4.h", ],
  visibility = ["//visibility:public"]
)
    """,
    strip_prefix = "CMSIS_5-develop",
    url = "https://github.com/ARM-software/CMSIS_5/archive/refs/heads/develop.zip",
)

# Get the OpenOCD binary (we'll use it for flashing).
cipd_repository(
    name = "openocd",
    path = "infra/3pp/tools/openocd/${os}-${arch}",
    tag = "version:2@0.11.0-3",
)

# Fetch gcc-arm-none-eabi toolchain.
cipd_repository(
    name = "gcc_arm_none_eabi_toolchain",
    build_file = "@pigweed//pw_toolchain/build_external:arm_none_eabi_gcc.BUILD",
    path = "fuchsia/third_party/armgcc/${os}-${arch}",
    tag = "version:2@12.2.MPACBTI-Rel1.1",
)

# Toolchain registration
# ======================
# Register Pigweed's C++ toolchains.
register_toolchains(
    # "//toolchains:cc_toolchain_cortex-m4",
    "//toolchains:gcc_device",
    "@pigweed//pw_toolchain/host_clang:host_cc_toolchain_linux",
    "@pigweed//pw_toolchain/host_clang:host_cc_toolchain_macos",
    dev_dependency = True,
)
