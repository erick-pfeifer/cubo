load("@rules_cc//cc/toolchains:toolchain.bzl", "cc_toolchain")
load("@rules_cc//cc/toolchains:args.bzl", "cc_args")

cc_args(
    name = "warnings",
    actions = [
        "@rules_cc//cc/toolchains/actions:compile_actions",
    ],
    args = [
        # This can't be in common, because proto headers in host builds trigger
        "-Wundef",
        # Silence the really verbose ARM warnings.
        "-Wno-psabi",
    ],
)

cc_args(
    name = "cortex_common_link",
    actions = ["@rules_cc//cc/toolchains/actions:link_actions"],
    args = [
        "-Wl,--gc-sections",
        "-specs=nano.specs",
        "-specs=nosys.specs",
        "-lstdc++",
        "-lnosys",
        "-lc",
        "-lm",
        "-Wl,--no-warn-rwx-segment",
    ],
)

cc_args(
    name = "cortex_common",
    actions = [
        "@rules_cc//cc/toolchains/actions:compile_actions",
    ],
    args = [
        "-ffreestanding",
        "-specs=nano.specs",
        "-specs=nosys.specs",
    ],
)

cc_args(
    name = "cortex-m4",
    actions = [
        "@rules_cc//cc/toolchains/actions:assembly_actions",
        "@rules_cc//cc/toolchains/actions:compile_actions",
        "@rules_cc//cc/toolchains/actions:link_actions",
    ],
    args = [
        "-mcpu=cortex-m4",
        "-mfloat-abi=hard",
        "-mfpu=fpv4-sp-d16",
        # Used by some pigweed tests/targets to correctly handle hardware FPU
        # behavior.
        "-DPW_ARMV7M_ENABLE_FPU=1",
    ],
)

cc_args(
    name = "thumb_abi",
    actions = [
        "@rules_cc//cc/toolchains/actions:assembly_actions",
        "@rules_cc//cc/toolchains/actions:compile_actions",
        "@rules_cc//cc/toolchains/actions:link_actions",
    ],
    args = [
        "-mabi=aapcs",
        "-mthumb",
    ],
)

cc_args(
    name = "no_canonical_system_headers",
    actions = [
        "@rules_cc//cc/toolchains/actions:compile_actions",
    ],
    args = [
        "-fno-canonical-system-headers",
    ],
)

cc_toolchain(
    name = "arm_gcc_toolchain_cortex-m",
    args = [
        "@pigweed//pw_toolchain/cc/args:oz",
        "@pigweed//pw_toolchain/cc/args:debugging",
        "@pigweed//pw_toolchain/cc/args:reduced_size",
        "@pigweed//pw_toolchain/cc/args:no_canonical_prefixes",
        "@pigweed//pw_toolchain/cc/args:no_rtti",
        "@pigweed//pw_toolchain/cc/args:wno_register",
        "@pigweed//pw_toolchain/cc/args:wnon_virtual_dtor",
        "@pigweed//pw_toolchain/cc/args:common_warnings",
        "@pigweed//pw_toolchain/cc/args:color_diagnostics",
        ":cortex-m4",
        ":cortex_common",
        ":thumb_abi",
        ":cortex_common_link",
        ":no_canonical_system_headers",
        ":warnings",
    ],
    enabled_features = [
        "@rules_cc//cc/toolchains/args:experimental_replace_legacy_action_config_features",
        "@pigweed//pw_toolchain/cc/capability:compiler_is_gcc",
        "@pigweed//pw_toolchain/cc/capability:linker_is_gcc",
        "@pigweed//pw_toolchain/cc/args:c++20_feature",
    ],
    known_features = [
        "@rules_cc//cc/toolchains/args:experimental_replace_legacy_action_config_features",
        "@pigweed//pw_toolchain/cc/args:c++17_feature",
        "@pigweed//pw_toolchain/cc/args:c++20_feature",
        "@pigweed//pw_toolchain/cc/capability:compiler_is_gcc",
        "@pigweed//pw_toolchain/cc/capability:linker_is_gcc",
    ],
    target_compatible_with = [
        "@pigweed//pw_build/constraints/arm:cortex-m4"
    ],

    tool_map = "@gcc_arm_none_eabi_toolchain//:all_tools",
)


toolchain(
    name = "gcc_device",
    target_compatible_with = [
        "@pigweed//pw_build/constraints/arm:cortex-m4",
    ],
    toolchain = ":arm_gcc_toolchain_cortex-m",
    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
)


toolchain(
    name = "cc_toolchain_cortex-m4",
    target_compatible_with = [
        "@pigweed//pw_build/constraints/arm:cortex-m4",
    ],
    toolchain = "@pigweed//pw_toolchain:cortex-m_cc_toolchain",
    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
)


